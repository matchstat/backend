import { Connection, Repository } from 'typeorm';
import { MatchPlayedGameDto } from 'src/modules/game/dto/match-played-game.dto';
import { GameAtp, GameWta } from 'src/modules/game/entity/game.entity';
import { TourType } from 'src/modules/shared/middlewares/tour.middleware';
import { StatAtp, StatWta } from 'src/modules/stat/entity/stat.entity';
import { TodayAtp, TodayWta } from 'src/modules/today/entity/today.entity';
import { PlayerAtp, PlayerWta } from 'src/modules/player/entity/player.entity';
import { SharedService } from './shared.service';
import { PlayerStatAtp, PlayerStatWta } from 'src/modules/player-stats/entity/player-stat.entity';
import { Court } from 'src/modules/court/entity/court.entity';
import { GameService } from './game.service';
import { RatingAtp, RatingWta } from 'src/modules/ratings/entity/rating.entity';
import { Round } from 'src/modules/round/entity/round.entity';
import { Rank } from 'src/modules/rank/entity/rank.entity';
import { TournamentAtp, TournamentWta } from 'src/modules/tournament/entity/tournament.entity';
export declare class H2hService {
    private todayAtpRepo;
    private todayWtaRepo;
    private gameAtpRepo;
    private gameWtaRepo;
    private playerAtpRepo;
    private playerWtaRepo;
    private statAtpRepo;
    private statWtaRepo;
    private playerStatAtpRepo;
    private playerStatWtaRepo;
    private tournamentAtpRepository;
    private tournamentWtaRepository;
    private courtRepository;
    private roundRepository;
    private rankRepository;
    private ratingAtpRepo;
    private ratingWtaRepo;
    private connection;
    private sharedService;
    private gameService;
    constructor(todayAtpRepo: Repository<TodayAtp>, todayWtaRepo: Repository<TodayWta>, gameAtpRepo: Repository<GameAtp>, gameWtaRepo: Repository<GameWta>, playerAtpRepo: Repository<PlayerAtp>, playerWtaRepo: Repository<PlayerWta>, statAtpRepo: Repository<StatAtp>, statWtaRepo: Repository<StatWta>, playerStatAtpRepo: Repository<PlayerStatAtp>, playerStatWtaRepo: Repository<PlayerStatWta>, tournamentAtpRepository: Repository<TournamentAtp>, tournamentWtaRepository: Repository<TournamentWta>, courtRepository: Repository<Court>, roundRepository: Repository<Round>, rankRepository: Repository<Rank>, ratingAtpRepo: Repository<RatingAtp>, ratingWtaRepo: Repository<RatingWta>, connection: Connection, sharedService: SharedService, gameService: GameService);
    findProfile(type: string, playerOne: string, playerTwo: string, limit: boolean): Promise<{
        player1: {
            careerWLPercentage: number;
            careerMoney: number;
            totalTitles: number;
            careerWin: number;
            careerLose: number;
            ytdWLPercentage: number;
            ytdTitles: number;
            ytdWon: number;
            ytdLost: number;
            id: number;
            name: string;
            country: string;
            contryAcr: string;
            playerStat: {
                maintourWin: number;
                maintourLose: number;
                finalsWin: number;
                finalsLose: number;
                masterWin: number;
                masterLose: number;
                slamWin: number;
                slamLose: number;
                cupsWin: number;
                cupsLose: number;
                futuresWin: number;
                futuresLose: number;
                challengersWin: number;
                challengersLose: number;
                totalWins: number;
                totalLose: number;
            };
            image: string;
            birthday: Date;
            currentRank: number;
            plays: string;
            recentGames: ("w" | "l")[];
            bestRank: number;
        };
        player2: {
            careerWLPercentage: number;
            careerMoney: number;
            totalTitles: number;
            careerWin: number;
            careerLose: number;
            ytdWLPercentage: number;
            ytdTitles: number;
            ytdWon: number;
            ytdLost: number;
            id: number;
            name: string;
            country: string;
            contryAcr: string;
            playerStat: {
                maintourWin: number;
                maintourLose: number;
                finalsWin: number;
                finalsLose: number;
                masterWin: number;
                masterLose: number;
                slamWin: number;
                slamLose: number;
                cupsWin: number;
                cupsLose: number;
                futuresWin: number;
                futuresLose: number;
                challengersWin: number;
                challengersLose: number;
                totalWins: number;
                totalLose: number;
            };
            image: string;
            birthday: Date;
            currentRank: number;
            plays: string;
            recentGames: ("w" | "l")[];
            bestRank: number;
        };
        surfaceData: {
            hard1: number;
            iHard1: number;
            clay1: number;
            grass1: number;
            hard2: number;
            iHard2: number;
            clay2: number;
            grass2: number;
            total1: number;
            total2: number;
        };
    }>;
    pvpH2hStats(type: string, playerOne: string, playerTwo: string, query: MatchPlayedGameDto): Promise<{
        matchesCount: number;
        player1: {
            name: string;
            matchesWon: number;
            acesCount: number;
            doubleFaultsCount: number;
            avgTime: string;
            firstServe: number;
            firstServeOf: number;
            firstServePercentage: number;
            winningOnFirstServe: number;
            winningOnFirstServeOf: number;
            winningOnSecondServe: number;
            winningOnSecondServeOf: number;
            winningOnFirstServePercentage: number;
            winningOnSecondServePercentage: number;
            returnPtsWin: number;
            returnPtsWinOf: number;
            returnPtsWinPercentage: number;
            breakPointsConverted: number;
            breakPointsConvertedOf: number;
            breakpointsWonPercentage: number;
            bestOfThreeWon: number;
            bestOfThreeWonPercentage: number;
            bestOfThreeCount: number;
            bestOfFiveWon: number;
            bestOfFiveWonPercentage: number;
            bestOfFiveCount: number;
            firstSetWinMatchWin: number;
            firstSetWinMatchWinPercentage: number;
            firstSetWinMatchLose: number;
            firstSetWinMatchLosePercentage: number;
            firstSetLoseMatchWin: number;
            firstSetLoseMatchWinPercentage: number;
            firstSetWinCount: number;
            firstSetLoseCount: number;
            decidingSetWin: number;
            decidingSetCount: number;
            decidingSetWinPercentage: number;
            tiebreakWon: number;
            tiebreakCount: number;
            totalTBWinPercentage: number;
            setsWon: number;
            gamesWon: number;
            title: number;
            grandSlam: number;
            masters: number;
            mainTour: number;
            tourFinals: number;
            cups: number;
            futures: number;
            challengers: number;
        };
        player2: {
            name: string;
            matchesWon: number;
            acesCount: number;
            doubleFaultsCount: number;
            avgTime: string;
            firstServe: number;
            firstServeOf: number;
            firstServePercentage: number;
            winningOnFirstServe: number;
            winningOnFirstServeOf: number;
            winningOnFirstServePercentage: number;
            winningOnSecondServe: number;
            winningOnSecondServeOf: number;
            winningOnSecondServePercentage: number;
            returnPtsWin: number;
            returnPtsWinOf: number;
            returnPtsWinPercentage: number;
            breakPointsConverted: number;
            breakPointsConvertedOf: number;
            breakpointsWonPercentage: number;
            bestOfThreeWon: number;
            bestOfThreeWonPercentage: number;
            bestOfThreeCount: number;
            bestOfFiveWon: number;
            bestOfFiveWonPercentage: number;
            bestOfFiveCount: number;
            firstSetWinMatchWin: number;
            firstSetWinMatchWinPercentage: number;
            firstSetWinMatchLose: number;
            firstSetWinMatchLosePercentage: number;
            firstSetLoseMatchWin: number;
            firstSetLoseMatchWinPercentage: number;
            firstSetWinCount: number;
            firstSetLoseCount: number;
            decidingSetWin: number;
            decidingSetCount: number;
            decidingSetWinPercentage: number;
            tiebreakWon: number;
            tiebreakCount: number;
            totalTBWinPercentage: number;
            setsWon: number;
            gamesWon: number;
            title: number;
            grandSlam: number;
            masters: number;
            mainTour: number;
            tourFinals: number;
            cups: number;
            futures: number;
            challengers: number;
        };
        surfaceData: {
            hard1: number;
            iHard1: number;
            clay1: number;
            grass1: number;
            hard2: number;
            iHard2: number;
            clay2: number;
            grass2: number;
            total1: number;
            total2: number;
        };
    }>;
    pvpMatchesPlayed(type: string, playerOne: string, playerTwo: string, query: MatchPlayedGameDto): Promise<{
        singles: any[];
        doubles: any[];
        qualifying: any[];
        singlesCount: number;
    }>;
    findCurrentEventStats(type: TourType, player: string, player2: string): Promise<{
        winsCountOnWin1: any;
        winsCountOnWin2: any;
        name: string;
        tourName: any;
        country: any;
        court: any;
        averageFirstServeSpeed: number;
        averageSecondServeSpeed: number;
        fastestServe: any;
        lastMatchTime: string;
        totalTime: string;
        matchesPlayed: any;
        totalPointsWon: any;
        unforcedErrors: any;
        breakPointsSaved: number;
        breakPointsSavedOf: any;
        breakPointsSavedPercentage: number;
        serviceHold: any;
        serviceHoldOf: any;
        serviceHoldPercentage: number;
        oppHold: any;
        oppHoldOf: any;
        decidingSetWin: any;
        decidingSetWinPercentage: number;
        tiebreakWon: any;
        totalTBWinPercentage: number;
        avgOpponentRank: number;
    }>;
    findPlayerRecentMatches(type: TourType, player: string, query: MatchPlayedGameDto): Promise<{
        name: string;
        count: number;
        games: ({
            isWin: boolean;
            tournament: TournamentAtp;
            player1: PlayerAtp;
            player2: PlayerAtp;
            players: PlayerAtp;
            id: number;
            round: Round;
            roundId: number;
            result: string;
            date: Date;
            seed1: string;
            seed2: string;
            odd1: string;
            odd2: string;
            player1Id: number;
            player2Id: number;
            tournamentId: number;
            draw: number;
        } | {
            isWin: boolean;
            tournament: TournamentWta;
            player1: PlayerWta;
            player2: PlayerWta;
            players: PlayerWta;
            id: number;
            round: Round;
            roundId: number;
            result: string;
            date: Date;
            seed1: string;
            seed2: string;
            odd1: string;
            odd2: string;
            player1Id: number;
            player2Id: number;
            tournamentId: number;
            draw: number;
        })[];
    }>;
    findUpcomingMatch(type: TourType, playerOne: string, playerTwo: string): Promise<TodayAtp | TodayWta>;
    findBreakdownStats(type: TourType, name: string, query: MatchPlayedGameDto): Promise<{
        totalDoubleFaultsCount: number;
        ytdWon: number;
        ytdLost: number;
        aces: number;
        acesTotal: number;
        doubleFaultsCount: number;
        firstServe: number;
        firstServeOf: number;
        firstServePercentage: number;
        winningOnFirstServe: number;
        winningOnFirstServeOf: number;
        winningOnFirstServePercentage: number;
        winningOnSecondServe: number;
        winningOnSecondServeOf: number;
        winningOnSecondServePercentage: number;
        returnPtsWin: number;
        returnPtsWinOf: number;
        returnPtsWinPercentage: number;
        breakPointsConverted: number;
        breakPointsConvertedOf: number;
        breakpointsWonPercentage: number;
        bestOfThreeWon: number;
        bestOfThreeWonPercentage: number;
        bestOfThreeCount: number;
        bestOfFiveWon: number;
        bestOfFiveWonPercentage: number;
        bestOfFiveCount: number;
        firstSetWinMatchWin: number;
        firstSetWinMatchWinPercentage: number;
        firstSetWinMatchLose: number;
        firstSetWinMatchLosePercentage: number;
        firstSetLoseMatchWin: number;
        firstSetLoseMatchWinPercentage: number;
        firstSetWinCount: number;
        firstSetLoseCount: number;
        decidingSetWin: number;
        decidingSetCount: number;
        decidingSetWinPercentage: number;
        tiebreakWon: number;
        tiebreakCount: number;
        totalTBWinPercentage: number;
        avgOppRank: number;
        hard1: number;
        iHard1: number;
        clay1: number;
        grass1: number;
        hard2: number;
        iHard2: number;
        clay2: number;
        grass2: number;
        total1: number;
        total2: number;
        matchesCount: number;
        name: string;
        avgTime1: string;
        avgTime2: string;
        matchesWon1: number;
        matchesWon2: number;
        gamesWon1: number;
        gamesWon2: number;
        totalPointsWon: number;
        setsWon1: number;
        setsWon2: number;
        slam1: number;
        slam2: number;
        title1: number;
        title2: number;
        master1: number;
        master2: number;
        main1: number;
        main2: number;
        cup1: number;
        cup2: number;
        future1: number;
        future2: number;
        challengers1: number;
        challengers2: number;
        tourFinals1: number;
        tourFinals2: number;
    }>;
    findFiltersVs(type: TourType, playerName1: string, playerName2: any): Promise<{
        courts: Court[];
        rounds: Round[];
        level: Rank[];
        tournaments: any;
        years: any;
    }>;
    findFilters(type: TourType, playerName1: string, playerName2: any): Promise<{
        courts: Court[];
        rounds: Round[];
        level: Rank[];
        tournaments: any;
        years: any;
    }>;
    private getRounds;
    private getSetsWon;
    private getTiebreaksWon;
    private getBestOfStat;
    private getDecidingSetStat;
    private getCourtStat;
    private getTournamentRank;
    private getGamesData;
    private getFirstSetWinMatchWin;
    private getFirstSetWinMatchLose;
    private getFirstSetLoseMatchWin;
    private GetFirstSetWinLoseCount;
    private getAvgMatchTime;
    private recentGame;
    private recentGameNoLimit;
    private getPlayerStat;
    private getPlayerByName;
    private getSurfaceDataForTwo;
    private getMatchesData;
    private getSurfaceData;
    private bestRank;
    private currentRank;
    private getYtdTitles;
    private getYTDWL;
    private getCareerWL;
    private careerMoney;
    private roundIdToName;
    private getLevelBreakdown;
}
