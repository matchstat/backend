import { MatchPlayedGameDto } from 'src/modules/game/dto/match-played-game.dto';
import { TourType } from 'src/modules/shared/middlewares/tour.middleware';
import { H2hService } from 'src/services/h2h.service';
export declare class H2hController {
    private readonly h2hService;
    constructor(h2hService: H2hService);
    findProfiles(type: TourType, player1: string, player2: string, limit: boolean): Promise<{
        player1: {
            careerWLPercentage: number;
            careerMoney: number;
            totalTitles: number;
            careerWin: number;
            careerLose: number;
            ytdWLPercentage: number;
            ytdTitles: number;
            ytdWon: number;
            ytdLost: number;
            id: number;
            name: string;
            country: string;
            contryAcr: string;
            playerStat: {
                maintourWin: number;
                maintourLose: number;
                finalsWin: number;
                finalsLose: number;
                masterWin: number;
                masterLose: number;
                slamWin: number;
                slamLose: number;
                cupsWin: number;
                cupsLose: number;
                futuresWin: number;
                futuresLose: number;
                challengersWin: number;
                challengersLose: number;
                totalWins: number;
                totalLose: number;
            };
            image: string;
            birthday: Date;
            currentRank: number;
            plays: string;
            recentGames: ("w" | "l")[];
            bestRank: number;
        };
        player2: {
            careerWLPercentage: number;
            careerMoney: number;
            totalTitles: number;
            careerWin: number;
            careerLose: number;
            ytdWLPercentage: number;
            ytdTitles: number;
            ytdWon: number;
            ytdLost: number;
            id: number;
            name: string;
            country: string;
            contryAcr: string;
            playerStat: {
                maintourWin: number;
                maintourLose: number;
                finalsWin: number;
                finalsLose: number;
                masterWin: number;
                masterLose: number;
                slamWin: number;
                slamLose: number;
                cupsWin: number;
                cupsLose: number;
                futuresWin: number;
                futuresLose: number;
                challengersWin: number;
                challengersLose: number;
                totalWins: number;
                totalLose: number;
            };
            image: string;
            birthday: Date;
            currentRank: number;
            plays: string;
            recentGames: ("w" | "l")[];
            bestRank: number;
        };
        surfaceData: {
            hard1: number;
            iHard1: number;
            clay1: number;
            grass1: number;
            hard2: number;
            iHard2: number;
            clay2: number;
            grass2: number;
            total1: number;
            total2: number;
        };
    }>;
    findH2hStats(type: TourType, player1: string, player2: string, queryParams: MatchPlayedGameDto): Promise<{
        matchesCount: number;
        player1: {
            name: string;
            matchesWon: number;
            acesCount: number;
            doubleFaultsCount: number;
            avgTime: string;
            firstServe: number;
            firstServeOf: number;
            firstServePercentage: number;
            winningOnFirstServe: number;
            winningOnFirstServeOf: number;
            winningOnSecondServe: number;
            winningOnSecondServeOf: number;
            winningOnFirstServePercentage: number;
            winningOnSecondServePercentage: number;
            returnPtsWin: number;
            returnPtsWinOf: number;
            returnPtsWinPercentage: number;
            breakPointsConverted: number;
            breakPointsConvertedOf: number;
            breakpointsWonPercentage: number;
            bestOfThreeWon: number;
            bestOfThreeWonPercentage: number;
            bestOfThreeCount: number;
            bestOfFiveWon: number;
            bestOfFiveWonPercentage: number;
            bestOfFiveCount: number;
            firstSetWinMatchWin: number;
            firstSetWinMatchWinPercentage: number;
            firstSetWinMatchLose: number;
            firstSetWinMatchLosePercentage: number;
            firstSetLoseMatchWin: number;
            firstSetLoseMatchWinPercentage: number;
            firstSetWinCount: number;
            firstSetLoseCount: number;
            decidingSetWin: number;
            decidingSetCount: number;
            decidingSetWinPercentage: number;
            tiebreakWon: number;
            tiebreakCount: number;
            totalTBWinPercentage: number;
            setsWon: number;
            gamesWon: number;
            title: number;
            grandSlam: number;
            masters: number;
            mainTour: number;
            tourFinals: number;
            cups: number;
            futures: number;
            challengers: number;
        };
        player2: {
            name: string;
            matchesWon: number;
            acesCount: number;
            doubleFaultsCount: number;
            avgTime: string;
            firstServe: number;
            firstServeOf: number;
            firstServePercentage: number;
            winningOnFirstServe: number;
            winningOnFirstServeOf: number;
            winningOnFirstServePercentage: number;
            winningOnSecondServe: number;
            winningOnSecondServeOf: number;
            winningOnSecondServePercentage: number;
            returnPtsWin: number;
            returnPtsWinOf: number;
            returnPtsWinPercentage: number;
            breakPointsConverted: number;
            breakPointsConvertedOf: number;
            breakpointsWonPercentage: number;
            bestOfThreeWon: number;
            bestOfThreeWonPercentage: number;
            bestOfThreeCount: number;
            bestOfFiveWon: number;
            bestOfFiveWonPercentage: number;
            bestOfFiveCount: number;
            firstSetWinMatchWin: number;
            firstSetWinMatchWinPercentage: number;
            firstSetWinMatchLose: number;
            firstSetWinMatchLosePercentage: number;
            firstSetLoseMatchWin: number;
            firstSetLoseMatchWinPercentage: number;
            firstSetWinCount: number;
            firstSetLoseCount: number;
            decidingSetWin: number;
            decidingSetCount: number;
            decidingSetWinPercentage: number;
            tiebreakWon: number;
            tiebreakCount: number;
            totalTBWinPercentage: number;
            setsWon: number;
            gamesWon: number;
            title: number;
            grandSlam: number;
            masters: number;
            mainTour: number;
            tourFinals: number;
            cups: number;
            futures: number;
            challengers: number;
        };
        surfaceData: {
            hard1: number;
            iHard1: number;
            clay1: number;
            grass1: number;
            hard2: number;
            iHard2: number;
            clay2: number;
            grass2: number;
            total1: number;
            total2: number;
        };
    }>;
    findMatchesHistory(type: TourType, player1: string, player2: string, queryParams: MatchPlayedGameDto): Promise<{
        singles: any[];
        doubles: any[];
        qualifying: any[];
        singlesCount: number;
    }>;
    findCurrentEventStats(type: TourType, player: string, player2: string): Promise<{
        winsCountOnWin1: any;
        winsCountOnWin2: any;
        name: string;
        tourName: any;
        country: any;
        court: any;
        averageFirstServeSpeed: number;
        averageSecondServeSpeed: number;
        fastestServe: any;
        lastMatchTime: string;
        totalTime: string;
        matchesPlayed: any;
        totalPointsWon: any;
        unforcedErrors: any;
        breakPointsSaved: number;
        breakPointsSavedOf: any;
        breakPointsSavedPercentage: number;
        serviceHold: any;
        serviceHoldOf: any;
        serviceHoldPercentage: number;
        oppHold: any;
        oppHoldOf: any;
        decidingSetWin: any;
        decidingSetWinPercentage: number;
        tiebreakWon: any;
        totalTBWinPercentage: number;
        avgOpponentRank: number;
    }>;
    findBreakDownStats(type: TourType, player: string, queryParams: MatchPlayedGameDto): Promise<{
        totalDoubleFaultsCount: number;
        ytdWon: number;
        ytdLost: number;
        aces: number;
        acesTotal: number;
        doubleFaultsCount: number;
        firstServe: number;
        firstServeOf: number;
        firstServePercentage: number;
        winningOnFirstServe: number;
        winningOnFirstServeOf: number;
        winningOnFirstServePercentage: number;
        winningOnSecondServe: number;
        winningOnSecondServeOf: number;
        winningOnSecondServePercentage: number;
        returnPtsWin: number;
        returnPtsWinOf: number;
        returnPtsWinPercentage: number;
        breakPointsConverted: number;
        breakPointsConvertedOf: number;
        breakpointsWonPercentage: number;
        bestOfThreeWon: number;
        bestOfThreeWonPercentage: number;
        bestOfThreeCount: number;
        bestOfFiveWon: number;
        bestOfFiveWonPercentage: number;
        bestOfFiveCount: number;
        firstSetWinMatchWin: number;
        firstSetWinMatchWinPercentage: number;
        firstSetWinMatchLose: number;
        firstSetWinMatchLosePercentage: number;
        firstSetLoseMatchWin: number;
        firstSetLoseMatchWinPercentage: number;
        firstSetWinCount: number;
        firstSetLoseCount: number;
        decidingSetWin: number;
        decidingSetCount: number;
        decidingSetWinPercentage: number;
        tiebreakWon: number;
        tiebreakCount: number;
        totalTBWinPercentage: number;
        avgOppRank: number;
        hard1: number;
        iHard1: number;
        clay1: number;
        grass1: number;
        hard2: number;
        iHard2: number;
        clay2: number;
        grass2: number;
        total1: number;
        total2: number;
        matchesCount: number;
        name: string;
        avgTime1: string;
        avgTime2: string;
        matchesWon1: number;
        matchesWon2: number;
        gamesWon1: number;
        gamesWon2: number;
        totalPointsWon: number;
        setsWon1: number;
        setsWon2: number;
        slam1: number;
        slam2: number;
        title1: number;
        title2: number;
        master1: number;
        master2: number;
        main1: number;
        main2: number;
        cup1: number;
        cup2: number;
        future1: number;
        future2: number;
        challengers1: number;
        challengers2: number;
        tourFinals1: number;
        tourFinals2: number;
    }>;
    findRecentMatches(type: TourType, player: string, queryParams: MatchPlayedGameDto): Promise<{
        name: string;
        count: number;
        games: ({
            isWin: boolean;
            tournament: import("../modules/tournament/entity/tournament.entity").TournamentAtp;
            player1: import("../modules/player/entity/player.entity").PlayerAtp;
            player2: import("../modules/player/entity/player.entity").PlayerAtp;
            players: import("../modules/player/entity/player.entity").PlayerAtp;
            id: number;
            round: import("../modules/round/entity/round.entity").Round;
            roundId: number;
            result: string;
            date: Date;
            seed1: string;
            seed2: string;
            odd1: string;
            odd2: string;
            player1Id: number;
            player2Id: number;
            tournamentId: number;
            draw: number;
        } | {
            isWin: boolean;
            tournament: import("../modules/tournament/entity/tournament.entity").TournamentWta;
            player1: import("../modules/player/entity/player.entity").PlayerWta;
            player2: import("../modules/player/entity/player.entity").PlayerWta;
            players: import("../modules/player/entity/player.entity").PlayerWta;
            id: number;
            round: import("../modules/round/entity/round.entity").Round;
            roundId: number;
            result: string;
            date: Date;
            seed1: string;
            seed2: string;
            odd1: string;
            odd2: string;
            player1Id: number;
            player2Id: number;
            tournamentId: number;
            draw: number;
        })[];
    }>;
    findUpcomingMatches(type: TourType, playerOne: string, playerTwo: string): Promise<import("../modules/today/entity/today.entity").TodayAtp | import("../modules/today/entity/today.entity").TodayWta>;
    findFiltersVs(playerOne: string, playerTwo: string, type: TourType): Promise<{
        courts: import("../modules/court/entity/court.entity").Court[];
        rounds: import("../modules/round/entity/round.entity").Round[];
        level: import("../modules/rank/entity/rank.entity").Rank[];
        tournaments: any;
        years: any;
    }>;
    findFilters(playerOne: string, playerTwo: string): Promise<{
        courts: import("../modules/court/entity/court.entity").Court[];
        rounds: import("../modules/round/entity/round.entity").Round[];
        level: import("../modules/rank/entity/rank.entity").Rank[];
        tournaments: any;
        years: any;
    }>;
}
